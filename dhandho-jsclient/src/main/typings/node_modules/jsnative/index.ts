


import { TestBed, TestModuleMetadata, async, fakeAsync, tick } from '@angular/core/testing';

import { } from '@angular/core';

// angular

export class TestModuleMetadataBuilder {
    private data: TestModuleMetadata = {};

    public imports( ...classes: any[] ): TestModuleMetadataBuilder {
        this.data.imports = classes;
        return this;
    }
    public providers( ...classes: any[] ): TestModuleMetadataBuilder {
        this.data.providers = classes;
        return this;
    }
    public declarations( ...classes: any[] ): TestModuleMetadataBuilder {
        this.data.declarations = classes;
        return this;
    }

    public build(): TestModuleMetadata {
        return this.data;
    }
}

export function angular_async( fn: Function ): Function {
    return async( fn );
}

export function angular_fakeAsync( fn: Function ): Function {
    return fakeAsync( fn );
}

export function angular_tick(): void {
    tick();
}

export function angular_newTestModuleMetadataBuilder(): TestModuleMetadataBuilder {
    return new TestModuleMetadataBuilder();
}


// jasmine
export function jasmine_describe( desc: string, fn: Function ): void {
    describe( desc, () => { fn.call( null ); } );
}

export function jasmine_it( desc: string, fn: Function ): void {
    it( desc, () => { fn.call( null ); } );
}


export function jasmine_expect<T>( obj: T ): jasmine.Matchers<T> {
    return expect( obj );
}

export function jasmine_beforeEach( action: ( p1: DoneFn ) => void ) {
    return beforeEach( action );
}


// others

export function js_isNumber( json: Object ): boolean {
    const type: string = typeof json;
    this.log.debug( 'typeof,json:%s is: %s', json, type );
    return /* equals */( <any>( ( o1: any, o2: any ) => {
        if ( o1 && o1.equals ) {
            return o1.equals( o2 );
        } else {
            return o1 === o2;
        }
    } )( type, 'number' ) );
}
